name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION_MATRIX: '["3.10", "3.11", "3.12"]'

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11, 3.12]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        uv sync --dev
        uv pip install -e .
    
    - name: Run linting
      run: |
        uv run black --check src/
        uv run flake8 src/
        uv run mypy src/
    
    - name: Run tests
      run: |
        uv run pytest --cov=src --cov-report=xml --cov-report=term-missing
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t engineering-ai-agent:test .
    
    - name: Test Docker image
      run: |
        docker run --rm engineering-ai-agent:test python -c "
        import sys
        sys.path.insert(0, '/app/src')
        from engineering_team.flow import EngineeringFlow
        print('✅ Docker image working correctly')
        "
    
    - name: Login to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      if: github.event_name == 'release'
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/engineering-ai-agent:latest .
        docker build -t ${{ secrets.DOCKER_USERNAME }}/engineering-ai-agent:${{ github.event.release.tag_name }} .
        docker push ${{ secrets.DOCKER_USERNAME }}/engineering-ai-agent:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/engineering-ai-agent:${{ github.event.release.tag_name }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: |
        uv sync --dev
        uv pip install -e .
    
    - name: Create test requirements
      run: |
        echo "Create a simple calculator application with basic arithmetic operations and a user interface." > req.txt
    
    - name: Run integration test
      run: |
        timeout 600 uv run python -m engineering_team.main_flow || echo "Integration test completed"
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
    
    - name: Check generated output
      run: |
        if [ -d "output" ]; then
          echo "✅ Output directory created"
          ls -la output/
        else
          echo "❌ No output directory found"
          exit 1
        fi

  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Run pre-commit
      run: uv run pre-commit run --all-files