[project]
name = "engineering-team-ai-agent"
version = "2.0.0"
description = "A powerful multi-agent system that automatically generates complete software systems from natural language requirements using CrewAI"
authors = [
    { name = "Engineering Team AI", email = "engineering@example.com" }
]
maintainers = [
    { name = "Engineering Team AI", email = "engineering@example.com" }
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.10,<3.13"
keywords = [
    "ai",
    "crewai", 
    "code-generation",
    "multi-agent",
    "gradio",
    "automation",
    "software-engineering"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "crewai[tools]>=0.108.0,<1.0.0",
    "gradio>=5.22.0",
    "pydantic>=2.0.0",
    "pytest>=8.4.1",
    "schedule>=1.2.2",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pre-commit>=3.0.0",
]
docker = [
    "gunicorn>=21.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/engineering-team-ai-agent"
Documentation = "https://github.com/your-org/engineering-team-ai-agent#readme"
Repository = "https://github.com/your-org/engineering-team-ai-agent.git"
Issues = "https://github.com/your-org/engineering-team-ai-agent/issues"
Changelog = "https://github.com/your-org/engineering-team-ai-agent/releases"

[project.scripts]
engineering_team = "engineering_team.main_flow:run"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.crewai]
type = "crew"

[tool.uv]
dev-dependencies = [
    "black>=23.0.0",
    "flake8>=6.0.0", 
    "mypy>=1.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pre-commit>=3.0.0",
]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | output
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80"
]
